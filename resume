2019/01 ~ 2019/03 (Bizlink) MES基礎建設 與 專案後續維運
　　系統使用 windows form 開發, 過去從未規範開發架構導致程式碼凌亂無序, 前端UI控制、應用邏輯、資料庫數據溝通皆參雜一起, 導致整個系統維運上耗費許多人力與時間, 將過去開發 MVC 的概念導入至開發思維, 使各個層級切開, 抽出共用邏輯並減少在程式碼裡寫死參數的情況, 開課提升團隊開發能力


2018/07 ~ 2018/12 (Bizlink) 集團子公司(Optiworks) MES 開發導入專案
　　參與客戶需求擷取, 制定開發規範, 監督 database schema 建立, 執行 code review 與技術指導維持程式碼品質, 將 MES系統從 「產線管理」 維度 提升至 「工站管理」層面, 並依需求實作出「載具」概念達成個產品需要「單件生產追溯」之需求, 撰寫技術開發及功能使用文件


2018/01 ~ 2018/06 (Bizlink) MES 系統開發運維、Oracle DB 學習至上手、改善底層排除長期出錯的舊技術債
	
　　了解製造業基礎流程與知識, 熟悉公司 IT 系統整體架構, 主要負責 MES 系統開發運維, 切換程式碼版本控管系統, 從原本微軟的 visual sourcesafe 改成 git 改善團隊開發版本控管問題, 了解 SAP 數據到 MES 端的整體架構流程, 並著手改善資料拋轉之效能與錯誤處理, 修改底層 Oracle Package 且上手 pl/sql


2017/05 ~  2017/11（91APP）ERP OMS 系統改寫專案

　　原舊系統之技術債過於沉重, 且程式語言不一致, 導致許多功能的效能或是維運因架構關係難以修改, 公司決議將實施系統翻改寫計畫, 將原本 PHP 製作的站台翻寫成 .NET MVC 還有將 原本分開的兩座資料庫合併成為一座方便於管理與解決效能問題, 主要負責開發 ERP 之 採購、進貨、銷貨 相關功能


2017/02 ~ 2017/05（91APP）大型店家網路賣家ERP系統轉移專案

　　改善後的 ERP 系統上線, 用 .NET MVC 實作與 POS 端串接之API (產品資料、銷貨資料、會員資料), 協助賣家從舊系統洗資料至新系統, 其中包含( 進貨單、產品資料、會員資料), 處理上線後之維運與需求


2016/05 ~ 2017/02（91APP）統合改善 舊ERP、舊OMS系統網站 大型專案

　　原系統技術債沉重公司開啟翻新計畫, 實作將原本兩個系統不同的登入與權限管理用標準的 OAuth 架構統合並搭上 中華電信 OTP 動態密碼鎖驗證, 並對於幾個比較重點的系統功能做效能調校與翻寫, 開始接觸 .NET MVC並實作功能, 新系統是由 三個站台 不同技術(PHP、WebForm、.NET MVC) 所集合而成, 但由於前端頁面樣式的統整, 使客戶使用時不會有真正切換站台那種突兀的感覺


2016/01 ~ 2016/04（91APP）大型店家網路賣家官網轉移專案

　　參與大型店家切官網之專案, 負責製作簡易 OAuth 認證 Server, 並開發 Webform 做資料交換串接, 用 C# 應用程式 搭配 Windows Task Scheduler 開發三家客戶的會員分等及發券之應用程式, 解決賣家切換系統會員轉移問題


2015/09 ~ 2015/11 (緯捷科技) 公司ERP、OMS系統開發與維運

　　了解公司主力產品 商業邏輯、程式邏輯, 由於兩個系統是由兩種語言撰寫的, 所以開始接觸 C# Webform 網站, 了解 PHP 的 Symfony 架構, 使用 Apache Tomcat 與 SQL Server Reporting Services 製作報表, 開始撰寫 C# 應用程式與外部平台串接, 也開發 PHP API 供外部廠商對接   


2015/05 ~ 2015/09 (緯捷科技) 資策會專案

　　初入社會, 一開協助前輩測試網站, 藉此開始熟練 PHP程式語言, 前輩離職後接手處理剩下未完成之項目, 並成功交付專案, 這個案子是原生 PHP 出來的, 對於新人來說, 開發或維運上難度較低, 適合用來熟練 PHP 語言


經歷心得
　　短短工作年資中, 迅速學習是個人認為的優點, 嘗試再嘗試是在任何工作環境中都會面對到的, 很多時候人們總是想要一步登天, 卻忽略了經歷的這些失敗才是前進與成長的過程, 初入社會時總會抱怨就有的技術債很	不可取甚至覺得可惡, 但在這些工作的路程裡漸漸明白, 無論如何, 這些程式它仍然在運作中並且持續地替公司賺著錢, 誰不是靠著工作在成長的呢？ 每個工程師回頭看看自己寫得程式碼總會覺得還是寫得不夠好, 所以發現的那些不美好就「持續改善」吧, 並且從中學習寫出能產出更高產值的程式碼, 把擋路石當成墊腳石吧

　　團隊合作, 才是真正能將事情向前發展的中要核心, 一個很強的人可以為團隊加分, 但卻不一定能使一個團隊走向成功, 很多時候都是如此, 就像重金聘請所謂的大神任職, 很多實例中對公司的發展沒有明顯的益處, 道理很簡單, 重點從來都不是你能造就什麼, 而是你能為團隊(公司)帶來什麼, 這個道理無論從最基層的員工一直到老闆都是通用的, 團隊的氛圍、流程、規範 都是直接影響事情成敗的關鍵, 與其用「管理」我更喜歡用「經營」二字來面對之, 因為「管理」比較像是個人努力造就團隊, 而「經營」才有共同持續下去的感覺

　　一路上從 測試、維運 走到 開發、上線 這約四年多的工程師之路, 雖然屢屢面對難題, 但也覺得自己很幸運的可以在這短短的時間內因此吸收很多正確觀念, 初入社會面臨已經邁入末期且技術債沉重的產品, 給了我一劑大補帖, 因為看過了最壞的示範與最隨便的程式碼, 感受到身為一名工程師什麼才是正確、怎樣才是該做的, 也感受過因時辰壓力而導致寫出的程式碼品質差的經驗, 在程式開發或維運的過程中, 時辰與品質一直以來都是互相砥礪的關係, 要如何在中間取捨是一門學問, 但有效的框架住兩者間範圍的則是架構, 有架構的開發可以避免程式碼歪的離譜, 也能加速程式開發並應對緊迫的時辰

　　另一方面則是效能問題, 改善過最有感覺的效能問題是 ERP 相關報表使用的 Stored Procedure,從原本的 300秒以上改到 5秒執行結束, 其實並不是因為本身對 T-SQL 的功力深厚, 單單純純只是原作者在報表上所寫的邏輯太差, 在從事工程師一段時間後, 會很容易發現這種現象, 很多效能相關的問題大部分並不是因為技術不夠或是資料過於龐大造成的, 更多時候是因為人為的疏失或是不用心導致效率差的邏輯存在於程式中, 而避免這種情形發生的方法, 通常得靠 Code Review 達成, 但往往許多公司實施 Code Review 一事後會發現效果並不顯著, 原因在於即便被糾正修改後, 但開發者本身對於寫程式的心態並未改變, 其實真正要修正的是程式設計者本生對於寫程式的心態, 當每個人都會為了明天的自己或是別人著想時, 自然而然寫出來的程式碼會是友善且容易閱讀維護的程式碼
 